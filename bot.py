#!/usr/bin/env python3
import logging
import os
import sys
import asyncio
import signal
import gspread
from datetime import datetime, timedelta
from typing import Optional, Dict, List, Any

from aiogram import Bot, Dispatcher, Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command, CommandStart
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from google.oauth2.service_account import Credentials
from dotenv import load_dotenv
import random
import time

# ===== –ó–ê–ì–†–£–ó–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò =====
load_dotenv()

# Telegram –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
API_TOKEN = os.getenv('API_TOKEN')
if not API_TOKEN:
    print("‚ùå API_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    sys.exit(1)

try:
    ADMIN_CHAT_ID = int(os.getenv('ADMIN_CHAT_ID', '0'))
    FEEDBACK_CHAT_ID = int(os.getenv('FEEDBACK_CHAT_ID', '0'))
except (ValueError, TypeError):
    ADMIN_CHAT_ID = 0
    FEEDBACK_CHAT_ID = 0

# Google Sheets –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
GSHEET_ID = os.getenv('GSHEET_ID')
GSHEET_TAB = os.getenv('GSHEET_TAB', 'Ads')
try:
    GSHEET_REFRESH_MIN = int(os.getenv('GSHEET_REFRESH_MIN', '2'))
except (ValueError, TypeError):
    GSHEET_REFRESH_MIN = 2

GSHEET_STATS_ID = os.getenv('GSHEET_STATS_ID')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç—á–µ—Ç–æ–≤
try:
    WEEKLY_REPORT_DOW = int(os.getenv('WEEKLY_REPORT_DOW', '1'))
    WEEKLY_REPORT_HOUR = int(os.getenv('WEEKLY_REPORT_HOUR', '9'))
except (ValueError, TypeError):
    WEEKLY_REPORT_DOW = 1
    WEEKLY_REPORT_HOUR = 9

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∫–ª–∞–º—ã
ADS_ENABLED = os.getenv('ADS_ENABLED', '0') == '1'
try:
    ADS_PROB = float(os.getenv('ADS_PROB', '0.18'))
    ADS_COOLDOWN_SEC = int(os.getenv('ADS_COOLDOWN_SEC', '180'))
except (ValueError, TypeError):
    ADS_PROB = 0.18
    ADS_COOLDOWN_SEC = 180

# UTM –º–µ—Ç–∫–∏
UTM_SOURCE = os.getenv('UTM_SOURCE', 'telegram')
UTM_MEDIUM = os.getenv('UTM_MEDIUM', 'bot')
UTM_CAMPAIGN = os.getenv('UTM_CAMPAIGN', 'bot_ads')

LOG_LEVEL = os.getenv('LOG_LEVEL', 'INFO').upper()

# ===== –ö–õ–ê–°–°–´ –°–û–°–¢–û–Ø–ù–ò–ô =====
class UserStates(StatesGroup):
    waiting_for_feedback = State()
    waiting_for_contact = State()

# ===== –û–°–ù–û–í–ù–û–ô –ö–õ–ê–°–° –ë–û–¢–ê =====
class TelegramAdsBot:
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º–æ–π –≤ Telegram —Å Google Sheets"""
    
    def __init__(self):
        self._setup_logging()
        self.bot: Optional[Bot] = None
        self.dp: Optional[Dispatcher] = None
        self.router: Optional[Router] = None
        self.storage: Optional[MemoryStorage] = None
        self.gc: Optional[gspread.Client] = None
        self.ads_sheet = None
        self.stats_sheet = None
        self.is_running = False
        self.start_time = None
        self.ads_cache = []
        self.last_cache_update = None
        self.user_last_ad = {}  # {user_id: timestamp}
        
    def _setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            log_level = getattr(logging, LOG_LEVEL, logging.INFO)
            
            formatter = logging.Formatter(
                '%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                datefmt='%Y-%m-%d %H:%M:%S'
            )
            
            logger = logging.getLogger()
            logger.setLevel(log_level)
            
            for handler in logger.handlers[:]:
                logger.removeHandler(handler)
            
            console_handler = logging.StreamHandler(sys.stdout)
            console_handler.setFormatter(formatter)
            logger.addHandler(console_handler)
            
            file_handler = logging.FileHandler('bot.log', encoding='utf-8')
            file_handler.setFormatter(formatter)
            logger.addHandler(file_handler)
            
            self.logger = logging.getLogger(__name__)
            self.logger.info("‚úÖ –õ–æ–≥–≥–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ª–æ–≥–≥–µ—Ä–∞: {e}")
            sys.exit(1)
    
    def _validate_config(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        if not API_TOKEN:
            self.logger.error("‚ùå API_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return False
            
        if not ADMIN_CHAT_ID:
            self.logger.warning("‚ö†Ô∏è ADMIN_CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∞–¥–º–∏–Ω—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            
        if not FEEDBACK_CHAT_ID:
            self.logger.warning("‚ö†Ô∏è FEEDBACK_CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ª–∏–¥—ã –Ω–µ –±—É–¥—É—Ç –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å—Å—è")
            
        if not GSHEET_ID:
            self.logger.warning("‚ö†Ô∏è GSHEET_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —Ä–∞–±–æ—Ç–∞ —Å Google Sheets –æ—Ç–∫–ª—é—á–µ–Ω–∞")
            
        self.logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        return True
    
    def _setup_signal_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown"""
        def signal_handler(signum, frame):
            self.logger.info(f"üìû –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...")
            asyncio.create_task(self._safe_shutdown())
            
        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)
    
    def _setup_google_sheets(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets"""
        try:
            if not GSHEET_ID:
                self.logger.warning("‚ö†Ô∏è GSHEET_ID –Ω–µ —É–∫–∞–∑–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É Google Sheets")
                return True
                
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º service account –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
            scope = ['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']
            
            # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å credentials –∏–∑ env
            creds_json = os.getenv('GOOGLE_CREDENTIALS_JSON')
            if creds_json:
                import json
                creds_dict = json.loads(creds_json)
                creds = Credentials.from_service_account_info(creds_dict, scopes=scope)
            else:
                # –ò–ª–∏ –∏–∑ —Ñ–∞–π–ª–∞
                creds_file = os.getenv('GOOGLE_CREDENTIALS_FILE', 'credentials.json')
                if not os.path.exists(creds_file):
                    self.logger.warning(f"‚ö†Ô∏è –§–∞–π–ª {creds_file} –Ω–µ –Ω–∞–π–¥–µ–Ω, Google Sheets –æ—Ç–∫–ª—é—á–µ–Ω")
                    return False
                creds = Credentials.from_service_account_file(creds_file, scopes=scope)
            
            self.gc = gspread.authorize(creds)
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
            self.ads_sheet = self.gc.open_by_key(GSHEET_ID).worksheet(GSHEET_TAB)
            self.logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ (–ª–∏—Å—Ç: {GSHEET_TAB})")
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞
            if GSHEET_STATS_ID:
                self.stats_sheet = self.gc.open_by_key(GSHEET_STATS_ID).sheet1
                self.logger.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
            
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Google Sheets: {e}")
            return False
    
    def _refresh_ads_cache(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π"""
        try:
            if not self.ads_sheet:
                return
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å –∫—ç—à
            if (self.last_cache_update and 
                datetime.now() - self.last_cache_update < timedelta(minutes=GSHEET_REFRESH_MIN)):
                return
            
            records = self.ads_sheet.get_all_records()
            self.ads_cache = [record for record in records if record.get('active', '') == '1']
            self.last_cache_update = datetime.now()
            self.logger.info(f"‚úÖ –ö—ç—à –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω: {len(self.ads_cache)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {e}")
    
    def _get_random_ad(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
        if not self.ads_cache:
            return None
            
        return random.choice(self.ads_cache)
    
    async def _send_ad_to_user(self, user_id: int, user_name: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            ad = self._get_random_ad()
            if not ad:
                return False
            
            text = ad.get('text', '')
            image_url = ad.get('image', '')
            button_text = ad.get('button_text', '')
            button_url = ad.get('button_url', '')
            
            # –î–æ–±–∞–≤–ª—è–µ–º UTM –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫ URL
            if button_url:
                if any(param in button_url for param in ['?', '&']):
                    button_url += f"&utm_source={UTM_SOURCE}&utm_medium={UTM_MEDIUM}&utm_campaign={UTM_CAMPAIGN}"
                else:
                    button_url += f"?utm_source={UTM_SOURCE}&utm_medium={UTM_MEDIUM}&utm_campaign={UTM_CAMPAIGN}"
            
            keyboard = None
            if button_text and button_url:
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text=button_text, url=button_url)]
                ])
            
            if image_url and image_url.strip():
                try:
                    await self.bot.send_photo(
                        user_id,
                        image_url,
                        caption=text,
                        reply_markup=keyboard
                    )
                except Exception as e:
                    self.logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç: {e}")
                    await self.bot.send_message(
                        user_id,
                        text,
                        reply_markup=keyboard
                    )
            else:
                await self.bot.send_message(
                    user_id,
                    text,
                    reply_markup=keyboard
                )
            
            # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–∫–∞–∑
            await self._log_ad_shown(ad, user_id, user_name)
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∫–ª–∞–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            return False
    
    async def _log_ad_shown(self, ad: Dict, user_id: int, user_name: str):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∫–∞–∑–∞ —Ä–µ–∫–ª–∞–º—ã"""
        try:
            if self.stats_sheet:
                timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                row = [timestamp, str(user_id), user_name, ad.get('id', 'N/A'), ad.get('title', 'N/A')]
                self.stats_sheet.append_row(row)
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∫–∞–∑–∞ —Ä–µ–∫–ª–∞–º—ã: {e}")
    
    async def _log_lead(self, user_data: Dict, message: str = ""):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∏–¥–∞ –≤ Google Sheets –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ —á–∞—Ç"""
        try:
            # –õ–æ–≥–∏—Ä—É–µ–º –≤ Google Sheets –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–∞–±–ª–∏—Ü–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            if self.stats_sheet:
                timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                row = [
                    timestamp, 
                    str(user_data.get('id', '')), 
                    user_data.get('name', ''),
                    user_data.get('username', ''),
                    'LEAD',
                    message[:100]  # –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
                ]
                self.stats_sheet.append_row(row)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç –¥–ª—è –ª–∏–¥–æ–≤
            if FEEDBACK_CHAT_ID:
                lead_text = f"""
üì• –ù–û–í–´–ô –õ–ò–î

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:
ID: {user_data.get('id', 'N/A')}
–ò–º—è: {user_data.get('name', 'N/A')}
Username: @{user_data.get('username', 'N/A')}

üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ:
{message if message else '–ö–æ–Ω—Ç–∞–∫—Ç –∑–∞–ø—Ä–æ—à–µ–Ω'}

üïí –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
                """
                await self.bot.send_message(FEEDBACK_CHAT_ID, lead_text)
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ª–∏–¥–∞: {e}")
    
    async def _create_bot_instance(self) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏"""
        try:
            self.logger.info("ü§ñ –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞...")
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: —É–±—Ä–∞–Ω–∞ –ø–µ—Ä–µ–¥–∞—á–∞ session –≤ Bot
            self.bot = Bot(
                token=API_TOKEN,
                default=DefaultBotProperties(parse_mode=ParseMode.HTML)
            )
            
            me = await self.bot.get_me()
            self.logger.info(f"‚úÖ –ë–æ—Ç @{me.username} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞: {e}")
            return False
    
    def _create_dispatcher(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞"""
        try:
            self.storage = MemoryStorage()
            self.dp = Dispatcher(storage=self.storage)
            self.router = Router()
            self.dp.include_router(self.router)
            self.logger.info("‚úÖ –î–∏—Å–ø–µ—Ç—á–µ—Ä –∏ —Ä–æ—É—Ç–µ—Ä —Å–æ–∑–¥–∞–Ω—ã")
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞: {e}")
            raise
    
    def _setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        try:
            # –ö–æ–º–∞–Ω–¥–∞ /start
            @self.router.message(CommandStart())
            async def handle_start(message: Message):
                try:
                    user = message.from_user
                    self.logger.info(f"üëã –ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –æ–±—ä—è–≤–ª–µ–Ω–∏–π
                    self._refresh_ads_cache()
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∫–ª–∞–º—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                    should_send_ad = False
                    if ADS_ENABLED:
                        now = time.time()
                        last_ad_time = self.user_last_ad.get(user.id, 0)
                        if now - last_ad_time > ADS_COOLDOWN_SEC and random.random() < ADS_PROB:
                            should_send_ad = True
                            self.user_last_ad[user.id] = now
                    
                    markup = ReplyKeyboardMarkup(
                        keyboard=[
                            [KeyboardButton(text="‚ÑπÔ∏è –û –Ω–∞—Å"), KeyboardButton(text="üíº –£—Å–ª—É–≥–∏")],
                            [KeyboardButton(text="üìû –°–≤—è–∑–∞—Ç—å—Å—è"), KeyboardButton(text="üéÅ –°–ø–µ—Ü–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ")],
                            [KeyboardButton(text="üîÑ –°—Ç–∞—Ç—É—Å")]
                        ],
                        resize_keyboard=True
                    )
                    
                    welcome_text = f"""
ü§ñ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}!</b>

–†–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–∞—Å! –Ø –ø–æ–º–æ–≥—É –≤–∞–º —É–∑–Ω–∞—Ç—å –æ –Ω–∞—à–∏—Ö —É—Å–ª—É–≥–∞—Ö –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö.

–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:
/help - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
/info - –æ –±–æ—Ç–µ
"""
                    await message.answer(welcome_text, reply_markup=markup)
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∫–ª–∞–º—É –ø–æ—Å–ª–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
                    if should_send_ad:
                        await asyncio.sleep(1)
                        await self._send_ad_to_user(user.id, user.first_name)
                        
                except Exception as e:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /start: {e}")
            
            # –ö–æ–º–∞–Ω–¥–∞ /help
            @self.router.message(Command("help"))
            async def handle_help(message: Message):
                try:
                    help_text = """
<b>üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>

/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/help - –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
/info - –û –±–æ—Ç–µ
/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
/feedback - –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤
/admin - –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å

<b>üîß –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>
‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å–ª—É–≥–∞—Ö
‚Ä¢ –°–≤—è–∑—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
‚Ä¢ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
"""
                    await message.answer(help_text)
                except Exception as e:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /help: {e}")
            
            # –ö–æ–º–∞–Ω–¥–∞ /feedback
            @self.router.message(Command("feedback"))
            async def handle_feedback_command(message: Message, state: FSMContext):
                try:
                    await message.answer(
                        "üí¨ <b>–û—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:</b>\n\n"
                        "–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –º—ã –µ–≥–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º!"
                    )
                    await state.set_state(UserStates.waiting_for_feedback)
                except Exception as e:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /feedback: {e}")
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Ñ–∏–¥–±–µ–∫–∞
            @self.router.message(UserStates.waiting_for_feedback)
            async def handle_feedback_text(message: Message, state: FSMContext):
                try:
                    user = message.from_user
                    feedback_text = message.text
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º —Ñ–∏–¥–±–µ–∫ –∫–∞–∫ –ª–∏–¥
                    user_data = {
                        'id': user.id,
                        'name': user.first_name,
                        'username': user.username
                    }
                    await self._log_lead(user_data, f"–§–∏–¥–±–µ–∫: {feedback_text}")
                    
                    await message.answer(
                        "‚úÖ <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!</b>\n\n"
                        "–ú—ã —Ü–µ–Ω–∏–º –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ –∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –µ–≥–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º."
                    )
                    await state.clear()
                    
                except Exception as e:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∏–¥–±–µ–∫–∞: {e}")
                    await state.clear()
            
            # –ö–Ω–æ–ø–∫–∞ "–°–≤—è–∑–∞—Ç—å—Å—è"
            @self.router.message(F.text == "üìû –°–≤—è–∑–∞—Ç—å—Å—è")
            async def handle_contact(message: Message, state: FSMContext):
                try:
                    user = message.from_user
                    
                    markup = ReplyKeyboardMarkup(
                        keyboard=[
                            [KeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)],
                            [KeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥")]
                        ],
                        resize_keyboard=True
                    )
                    
                    await message.answer(
                        "üìû <b>–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏</b>\n\n"
                        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, "
                        "–∏ –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!",
                        reply_markup=markup
                    )
                    await state.set_state(UserStates.waiting_for_contact)
                    
                except Exception as e:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ —Å–≤—è–∑–∏: {e}")
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
            @self.router.message(UserStates.waiting_for_contact, F.contact)
            async def handle_contact_received(message: Message, state: FSMContext):
                try:
                    user = message.from_user
                    contact = message.contact
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –∫–∞–∫ –ª–∏–¥
                    user_data = {
                        'id': user.id,
                        'name': contact.first_name or user.first_name,
                        'username': user.username,
                        'phone': contact.phone_number
                    }
                    await self._log_lead(user_data, "–ó–∞–ø—Ä–æ—Å —Å–≤—è–∑–∏ (–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞)")
                    
                    await message.answer(
                        "‚úÖ <b>–°–ø–∞—Å–∏–±–æ! –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—É—á–µ–Ω.</b>\n\n"
                        "–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
                        reply_markup=ReplyKeyboardMarkup(
                            keyboard=[
                                [KeyboardButton(text="‚ÑπÔ∏è –û –Ω–∞—Å"), KeyboardButton(text="üíº –£—Å–ª—É–≥–∏")],
                                [KeyboardButton(text="üìû –°–≤—è–∑–∞—Ç—å—Å—è"), KeyboardButton(text="üéÅ –°–ø–µ—Ü–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ")]
                            ],
                            resize_keyboard=True
                        )
                    )
                    await state.clear()
                    
                except Exception as e:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞: {e}")
                    await state.clear()
            
            # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
            @self.router.message(F.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥")
            async def handle_back(message: Message, state: FSMContext):
                try:
                    await state.clear()
                    markup = ReplyKeyboardMarkup(
                        keyboard=[
                            [KeyboardButton(text="‚ÑπÔ∏è –û –Ω–∞—Å"), KeyboardButton(text="üíº –£—Å–ª—É–≥–∏")],
                            [KeyboardButton(text="üìû –°–≤—è–∑–∞—Ç—å—Å—è"), KeyboardButton(text="üéÅ –°–ø–µ—Ü–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ")],
                            [KeyboardButton(text="üîÑ –°—Ç–∞—Ç—É—Å")]
                        ],
                        resize_keyboard=True
                    )
                    await message.answer("üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=markup)
                except Exception as e:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥: {e}")
            
            # –ö–Ω–æ–ø–∫–∞ "–û –Ω–∞—Å"
            @self.router.message(F.text == "‚ÑπÔ∏è –û –Ω–∞—Å")
            async def handle_about(message: Message):
                try:
                    about_text = """
<b>üè¢ –û –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏</b>

–ú—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∞—è—Å—è –Ω–∞ digital-—Ä–µ—à–µ–Ω–∏—è—Ö. 

<b>–ù–∞—à–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</b>
‚Ä¢ –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –±–æ–ª–µ–µ 5 –ª–µ—Ç
‚Ä¢ 100+ —É—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
‚Ä¢ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –∫–∞–∂–¥–æ–º—É –∫–ª–∏–µ–Ω—Ç—É
‚Ä¢ –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–∏

–£–∑–Ω–∞–π—Ç–µ –±–æ–ª—å—à–µ –æ –Ω–∞—à–∏—Ö —É—Å–ª—É–≥–∞—Ö –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏!
"""
                    await message.answer(about_text)
                except Exception as e:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ '–û –Ω–∞—Å': {e}")
            
            # –ö–Ω–æ–ø–∫–∞ "–£—Å–ª—É–≥–∏"
            @self.router.message(F.text == "üíº –£—Å–ª—É–≥–∏")
            async def handle_services(message: Message):
                try:
                    services_text = """
<b>üíº –ù–∞—à–∏ —É—Å–ª—É–≥–∏</b>

<b>üîπ –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –±–æ—Ç–æ–≤</b>
- Telegram, WhatsApp, VK –±–æ—Ç—ã
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å CRM –∏ –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö
- –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤

<b>üîπ –í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞</b>
- –°–∞–π—Ç—ã –∏ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
- –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω—ã
- –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –ø–æ—Ä—Ç–∞–ª—ã

<b>üîπ Digital-–º–∞—Ä–∫–µ—Ç–∏–Ω–≥</b>
- SEO –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
- –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è —Ä–µ–∫–ª–∞–º–∞
- SMM –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ

<b>üîπ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è</b>
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è API
- –°–∫—Ä–∏–ø—Ç—ã –∏ –ø–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö
- –ë–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å—ã

–ù–∞–∂–º–∏—Ç–µ "–°–≤—è–∑–∞—Ç—å—Å—è" –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏!
"""
                    await message.answer(services_text)
                except Exception as e:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ '–£—Å–ª—É–≥–∏': {e}")
            
            # –ö–Ω–æ–ø–∫–∞ "–°–ø–µ—Ü–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"
            @self.router.message(F.text == "üéÅ –°–ø–µ—Ü–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ")
            async def handle_special_offer(message: Message):
                try:
                    offer_text = """
<b>üéÅ –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ</b>

üî• <b>–¢–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤!</b>

–ü—Ä–∏ –∑–∞–∫–∞–∑–µ –ª—é–±–æ–π —É—Å–ª—É–≥–∏ –¥–æ –∫–æ–Ω—Ü–∞ –º–µ—Å—è—Ü–∞ –ø–æ–ª—É—á–∏—Ç–µ:

‚úÖ <b>–ë–µ—Å–ø–ª–∞—Ç–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é</b> –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –±–∏–∑–Ω–µ—Å–∞
‚úÖ <b>–ê—É–¥–∏—Ç</b> —Ç–µ–∫—É—â–∏—Ö digital-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤  
‚úÖ <b>–°–∫–∏–¥–∫—É 15%</b> –Ω–∞ –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑

–£—Å–ø–µ–π—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º! üèÉüí®

–ù–∞–∂–º–∏—Ç–µ "–°–≤—è–∑–∞—Ç—å—Å—è" —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏!
"""
                    await message.answer(offer_text)
                except Exception as e:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ '–°–ø–µ—Ü–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ': {e}")
            
            # –ö–æ–º–∞–Ω–¥–∞ /status
            @self.router.message(Command("status"))
            @self.router.message(F.text == "üîÑ –°—Ç–∞—Ç—É—Å")
            async def handle_status(message: Message):
                try:
                    ping_time = await self._get_ping()
                    status_text = f"""
<b>üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:</b>

ü§ñ <b>–ë–æ—Ç:</b> {'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' if self.is_running else 'üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}
üíæ <b>–ü–∞–º—è—Ç—å:</b> {self._get_memory_usage()} MB
‚è∞ <b>–ê–ø—Ç–∞–π–º:</b> {self._get_uptime()}
üì∂ <b>Ping:</b> {ping_time} ms

<b>üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
–û–±—ä—è–≤–ª–µ–Ω–∏—è –≤ –∫—ç—à–µ: {len(self.ads_cache)}
–†–µ–∫–ª–∞–º–∞: {'üü¢ –í–∫–ª' if ADS_ENABLED else 'üî¥ –í—ã–∫–ª'}
Google Sheets: {'üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ' if self.ads_sheet else 'üî¥ –û—Ç–∫–ª—é—á–µ–Ω–æ'}

<b>üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>
–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {self._get_today_users_count()}
"""
                    await message.answer(status_text)
                except Exception as e:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /status: {e}")
            
            # –ö–æ–º–∞–Ω–¥–∞ /info
            @self.router.message(Command("info"))
            async def handle_info(message: Message):
                try:
                    info_text = f"""
<b>‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ</b>

<b>–í–µ—Ä—Å–∏—è:</b> 2.0.0
<b>–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:</b> –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Ä–µ–∫–ª–∞–º—ã –∏ —Å–±–æ—Ä–∞ –ª–∏–¥–æ–≤
<b>–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:</b> –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è

<b>üîß –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:</b>
‚Ä¢ Aiogram 3.22.0
‚Ä¢ Google Sheets API
‚Ä¢ aiohttp 3.12.15

<b>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:</b>
–†–µ–∫–ª–∞–º–∞: {'–í–∫–ª—é—á–µ–Ω–∞' if ADS_ENABLED else '–í—ã–∫–ª—é—á–µ–Ω–∞'}
–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–µ–∫–ª–∞–º—ã: {ADS_PROB * 100}%
–ö—ç—à –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {GSHEET_REFRESH_MIN} –º–∏–Ω.

<b>üìä –§—É–Ω–∫—Ü–∏–∏:</b>
‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º–æ–π
‚úÖ –°–±–æ—Ä –ª–∏–¥–æ–≤  
‚úÖ Google Sheets –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
‚úÖ –ê–≤—Ç–æ-–æ—Ç—á–µ—Ç—ã
‚úÖ UTM –º–µ—Ç–∫–∏
"""
                    await message.answer(info_text)
                except Exception as e:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /info: {e}")
            
            # –ö–æ–º–∞–Ω–¥–∞ /admin
            @self.router.message(Command("admin"))
            async def handle_admin(message: Message):
                try:
                    if message.from_user.id != ADMIN_CHAT_ID:
                        await message.answer("‚ùå <b>–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!</b>\n\n–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
                        return
                    
                    admin_text = f"""
<b>üë®‚Äçüíª –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å</b>

<b>üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
–ê–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {len(self.ads_cache)}
–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞: {self.last_cache_update.strftime('%H:%M:%S') if self.last_cache_update else '–ù–∏–∫–æ–≥–¥–∞'}
–õ–æ–≥–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {self._get_today_logs_count()}

<b>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:</b>
ADS_ENABLED: {ADS_ENABLED}
ADS_PROB: {ADS_PROB}
ADS_COOLDOWN_SEC: {ADS_COOLDOWN_SEC}
GSHEET_REFRESH_MIN: {GSHEET_REFRESH_MIN}

<b>üîß –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∞:</b>
/update_ads - –û–±–Ω–æ–≤–∏—Ç—å –∫—ç—à –æ–±—ä—è–≤–ª–µ–Ω–∏–π
/stats - –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
"""
                    await message.answer(admin_text)
                except Exception as e:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /admin: {e}")
            
            # –ö–æ–º–∞–Ω–¥–∞ /update_ads
            @self.router.message(Command("update_ads"))
            async def handle_update_ads(message: Message):
                try:
                    if message.from_user.id != ADMIN_CHAT_ID:
                        return
                    
                    self._refresh_ads_cache()
                    await message.answer(f"‚úÖ –ö—ç—à –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω: {len(self.ads_cache)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
                    
                except Exception as e:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /update_ads: {e}")
                    await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞")
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            @self.router.message()
            async def handle_unknown(message: Message):
                try:
                    self.logger.info(f"‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.id}: {message.text}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∫–ª–∞–º—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                    if ADS_ENABLED:
                        user = message.from_user
                        now = time.time()
                        last_ad_time = self.user_last_ad.get(user.id, 0)
                        if now - last_ad_time > ADS_COOLDOWN_SEC and random.random() < ADS_PROB:
                            await self._send_ad_to_user(user.id, user.first_name)
                            self.user_last_ad[user.id] = now
                            return
                    
                    await message.answer(
                        "ü§î <b>–ù–µ –ø–æ–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—É</b>\n\n"
                        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏–ª–∏ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.",
                        reply_markup=ReplyKeyboardMarkup(
                            keyboard=[
                                [KeyboardButton(text="‚ÑπÔ∏è –û –Ω–∞—Å"), KeyboardButton(text="üíº –£—Å–ª—É–≥–∏")],
                                [KeyboardButton(text="üìû –°–≤—è–∑–∞—Ç—å—Å—è"), KeyboardButton(text="üéÅ –°–ø–µ—Ü–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ")]
                            ],
                            resize_keyboard=True
                        )
                    )
                except Exception as e:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            
            self.logger.info("‚úÖ –í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {e}")
            raise
    
    def _get_current_time(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
        return datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    
    def _get_memory_usage(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏"""
        try:
            import psutil
            process = psutil.Process(os.getpid())
            return round(process.memory_info().rss / 1024 / 1024, 2)
        except ImportError:
            return "N/A"
    
    def _get_uptime(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã"""
        try:
            if not self.start_time:
                return "N/A"
            uptime = time.time() - self.start_time
            hours = int(uptime // 3600)
            minutes = int((uptime % 3600) // 60)
            seconds = int(uptime % 60)
            return f"{hours:02d}:{minutes:02d}:{seconds:02d}"
        except:
            return "N/A"
    
    async def _get_ping(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ ping –¥–æ —Å–µ—Ä–≤–µ—Ä–æ–≤ Telegram"""
        try:
            start_time = time.time()
            await self.bot.get_me()
            ping_time = (time.time() - start_time) * 1000
            return f"{ping_time:.2f}"
        except:
            return "N/A"
    
    def _get_today_logs_count(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ª–æ–≥–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è"""
        try:
            today = datetime.now().strftime('%Y-%m-%d')
            count = 0
            if os.path.exists('bot.log'):
                with open('bot.log', 'r', encoding='utf-8') as f:
                    for line in f:
                        if today in line:
                            count += 1
            return count
        except:
            return "N/A"
    
    def _get_today_users_count(self):
        """–û—Ü–µ–Ω–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è"""
        try:
            # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
            # –°–µ–π—á–∞—Å –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–∏–º–µ—Ä–Ω–æ–µ —á–∏—Å–ª–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ª–æ–≥–æ–≤
            today = datetime.now().strftime('%Y-%m-%d')
            user_ids = set()
            if os.path.exists('bot.log'):
                with open('bot.log', 'r', encoding='utf-8') as f:
                    for line in f:
                        if today in line and '–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' in line:
                            # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ª–æ–≥–∞
                            import re
                            match = re.search(r'–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (\d+)', line)
                            if match:
                                user_ids.add(match.group(1))
            return len(user_ids)
        except:
            return "N/A"
    
    async def _send_weekly_report(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –∞–¥–º–∏–Ω—É"""
        try:
            if not ADMIN_CHAT_ID:
                return
                
            report_text = f"""
<b>üìä –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç</b>

<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é:</b>
–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {self._get_today_users_count()}
–ü–æ–∫–∞–∑–∞–Ω–æ —Ä–µ–∫–ª–∞–º—ã: {len(self.user_last_ad)}
–õ–æ–≥–æ–≤: {self._get_today_logs_count()}

<b>–°–∏—Å—Ç–µ–º–∞:</b>
–ê–ø—Ç–∞–π–º: {self._get_uptime()}
–ü–∞–º—è—Ç—å: {self._get_memory_usage()} MB
–û–±—ä—è–≤–ª–µ–Ω–∏—è –≤ –∫—ç—à–µ: {len(self.ads_cache)}

<b>–î–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞:</b> {self._get_current_time()}
"""
            await self.bot.send_message(ADMIN_CHAT_ID, report_text)
            self.logger.info("‚úÖ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω—É")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
    
    async def _schedule_tasks(self):
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á"""
        async def weekly_report_scheduler():
            while self.is_running:
                now = datetime.utcnow()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å—Ç—É–ø–∏–ª–æ –ª–∏ –≤—Ä–µ–º—è –¥–ª—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
                if (now.weekday() == (WEEKLY_REPORT_DOW - 1) % 7 and 
                    now.hour == WEEKLY_REPORT_HOUR and 
                    now.minute == 0):
                    
                    await self._send_weekly_report()
                    # –ñ–¥–µ–º 1 —á–∞—Å —á—Ç–æ–±—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞
                    await asyncio.sleep(3600)
                else:
                    await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        
        async def cache_updater():
            while self.is_running:
                self._refresh_ads_cache()
                await asyncio.sleep(GSHEET_REFRESH_MIN * 60)  # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –∫–∞–∂–¥—ã–µ N –º–∏–Ω—É—Ç
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∏
        asyncio.create_task(weekly_report_scheduler())
        asyncio.create_task(cache_updater())
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            self.logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞...")
            
            if not self._validate_config():
                return False
            
            self._setup_signal_handlers()
            
            if not await self._create_bot_instance():
                return False
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Google Sheets
            self._setup_google_sheets()
            
            self._create_dispatcher()
            self._setup_handlers()
            
            self.start_time = time.time()
            self.is_running = True
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
            self._refresh_ads_cache()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∏
            await self._schedule_tasks()
            
            self.logger.info("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º polling...")
            
            await self.dp.start_polling(
                self.bot,
                allowed_updates=["message", "callback_query", "chat_member"],
                handle_signals=False
            )
            
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
            return False
    
    async def _safe_shutdown(self):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"""
        self.logger.info("üõë –ù–∞—á–∏–Ω–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
        self.is_running = False
        
        try:
            if self.dp:
                await self.dp.stop_polling()
                self.logger.info("‚úÖ Polling –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏ –±–æ—Ç–∞
            if self.bot:
                await self.bot.session.close()
                self.logger.info("‚úÖ –°–µ—Å—Å–∏—è –±–æ—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∞")
            
            self.logger.info("‚úÖ –í—Å–µ —Ä–µ—Å—É—Ä—Å—ã –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã: {e}")
        finally:
            tasks = [t for t in asyncio.all_tasks() if t is not asyncio.current_task()]
            for task in tasks:
                task.cancel()
            await asyncio.gather(*tasks, return_exceptions=True)
            
            self.logger.info("üëã –ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    bot = TelegramAdsBot()
    
    try:
        success = await bot.start()
        if success:
            bot.logger.info("üéâ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        else:
            bot.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")
            return 1
            
    except KeyboardInterrupt:
        bot.logger.info("üìû –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª KeyboardInterrupt")
    except Exception as e:
        bot.logger.error(f"üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return 1
    finally:
        await bot._safe_shutdown()
    
    return 0

if __name__ == "__main__":
    try:
        exit_code = asyncio.run(main())
        sys.exit(exit_code)
    except KeyboardInterrupt:
        print("\nüëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        sys.exit(0)
    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

#!/usr/bin/env python3
import logging
import os
import sys
import asyncio
import signal
from datetime import datetime
from typing import Optional

from aiogram import Bot, Dispatcher, Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command, CommandStart
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.storage.memory import MemoryStorage
import aiohttp
from dotenv import load_dotenv

# ===== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø =====
load_dotenv()

BOT_TOKEN = os.getenv('BOT_TOKEN')
if not BOT_TOKEN:
    print("‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    sys.exit(1)

try:
    ADMIN_IDS = [int(x.strip()) for x in os.getenv('ADMIN_IDS', '').split(',') if x.strip()]
except (ValueError, AttributeError):
    ADMIN_IDS = []

LOG_LEVEL = os.getenv('LOG_LEVEL', 'INFO').upper()
# =========================

class AdvancedBotManager:
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –±–æ—Ç–∞ —Å –ø–æ–ª–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    
    def __init__(self):
        self._setup_logging()
        self.bot: Optional[Bot] = None
        self.dp: Optional[Dispatcher] = None
        self.router: Optional[Router] = None
        self.storage: Optional[MemoryStorage] = None
        self.is_running = False
        self.start_time = None
        self.session: Optional[aiohttp.ClientSession] = None
        
    def _setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è - –í –°–ê–ú–û–ú –ù–ê–ß–ê–õ–ï!"""
        try:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            log_level = getattr(logging, LOG_LEVEL, logging.INFO)
            
            # –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä
            formatter = logging.Formatter(
                '%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                datefmt='%Y-%m-%d %H:%M:%S'
            )
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π –ª–æ–≥–≥–µ—Ä
            logger = logging.getLogger()
            logger.setLevel(log_level)
            
            # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            for handler in logger.handlers[:]:
                logger.removeHandler(handler)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Å–æ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            console_handler = logging.StreamHandler(sys.stdout)
            console_handler.setFormatter(formatter)
            logger.addHandler(console_handler)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            file_handler = logging.FileHandler('bot.log', encoding='utf-8')
            file_handler.setFormatter(formatter)
            logger.addHandler(file_handler)
            
            self.logger = logging.getLogger(__name__)
            self.logger.info("‚úÖ –õ–æ–≥–≥–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ª–æ–≥–≥–µ—Ä–∞: {e}")
            sys.exit(1)
    
    def _validate_config(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        if not BOT_TOKEN:
            self.logger.error("‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return False
            
        if not ADMIN_IDS:
            self.logger.warning("‚ö†Ô∏è ADMIN_IDS –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã, –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            
        self.logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        return True
    
    def _setup_signal_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown"""
        def signal_handler(signum, frame):
            self.logger.info(f"üìû –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...")
            asyncio.create_task(self._safe_shutdown())
            
        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)
    
    async def _create_aiohttp_session(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ aiohttp —Å–µ—Å—Å–∏–∏"""
        try:
            timeout = aiohttp.ClientTimeout(total=30)
            self.session = aiohttp.ClientSession(timeout=timeout)
            self.logger.info("‚úÖ aiohttp —Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞")
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è aiohttp —Å–µ—Å—Å–∏–∏: {e}")
    
    async def _close_aiohttp_session(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ aiohttp —Å–µ—Å—Å–∏–∏"""
        try:
            if self.session and not self.session.closed:
                await self.session.close()
                self.logger.info("‚úÖ aiohttp —Å–µ—Å—Å–∏—è –∑–∞–∫—Ä—ã—Ç–∞")
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è aiohttp —Å–µ—Å—Å–∏–∏: {e}")
    
    async def _create_bot_instance(self) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏"""
        try:
            self.logger.info("ü§ñ –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞...")
            
            # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            self.bot = Bot(
                token=BOT_TOKEN,
                default=DefaultBotProperties(parse_mode=ParseMode.HTML),
                session=self.session
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–æ—Ç–∞
            me = await self.bot.get_me()
            self.logger.info(f"‚úÖ –ë–æ—Ç @{me.username} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞: {e}")
            return False
    
    def _create_dispatcher(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞"""
        try:
            self.storage = MemoryStorage()
            self.dp = Dispatcher(storage=self.storage)
            self.router = Router()
            self.dp.include_router(self.router)
            self.logger.info("‚úÖ –î–∏—Å–ø–µ—Ç—á–µ—Ä –∏ —Ä–æ—É—Ç–µ—Ä —Å–æ–∑–¥–∞–Ω—ã")
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞: {e}")
            raise
    
    def _setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        try:
            # –ö–æ–º–∞–Ω–¥–∞ /start
            @self.router.message(CommandStart())
            async def handle_start(message: Message):
                try:
                    self.logger.info(f"üëã –ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
                    
                    markup = ReplyKeyboardMarkup(
                        keyboard=[
                            [KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å"), KeyboardButton(text="üîÑ –°—Ç–∞—Ç—É—Å")],
                            [KeyboardButton(text="üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")]
                        ],
                        resize_keyboard=True
                    )
                    
                    user = message.from_user
                    await message.answer(
                        f"ü§ñ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}!</b>\n\n"
                        f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>\n"
                        f"   ID: <code>{user.id}</code>\n"
                        f"   –ò–º—è: {user.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                        f"   –§–∞–º–∏–ª–∏—è: {user.last_name or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
                        f"   Username: @{user.username or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n"
                        f"üïí <b>–í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞:</b> {self._get_current_time()}\n"
                        f"üì° <b>–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:</b> üü¢ –ê–∫—Ç–∏–≤–µ–Ω",
                        reply_markup=markup
                    )
                except Exception as e:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /start: {e}")
            
            # –ö–æ–º–∞–Ω–¥–∞ /help
            @self.router.message(Command("help"))
            @self.router.message(F.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
            async def handle_help(message: Message):
                try:
                    help_text = """
<b>üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>

/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
/help - –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –∏ –ø–æ–º–æ—â—å
/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –∏ –±–æ—Ç–∞
/info - –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
/admin - –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)

<b>üîß –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>
‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
‚Ä¢ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π
‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ

<b>‚ö° –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏:</b>
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º!
                    """
                    await message.answer(help_text)
                except Exception as e:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /help: {e}")
            
            # –ö–æ–º–∞–Ω–¥–∞ /status
            @self.router.message(Command("status"))
            @self.router.message(F.text == "üîÑ –°—Ç–∞—Ç—É—Å")
            async def handle_status(message: Message):
                try:
                    ping_time = await self._get_ping()
                    status_text = f"""
<b>üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:</b>

ü§ñ <b>–ë–æ—Ç:</b> {'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' if self.is_running else 'üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}
üíæ <b>–ü–∞–º—è—Ç—å:</b> {self._get_memory_usage()} MB
‚è∞ <b>–ê–ø—Ç–∞–π–º:</b> {self._get_uptime()}
üì∂ <b>Ping:</b> {ping_time} ms
üñ• <b>–ù–∞–≥—Ä—É–∑–∫–∞:</b> {self._get_system_load()}
üìà <b>–õ–æ–≥–æ–≤ —Å–µ–≥–æ–¥–Ω—è:</b> {self._get_today_logs_count()}

<b>üåê –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
–û–°: {sys.platform}
Python: {sys.version.split()[0]}
Aiogram: 3.22.0
                    """
                    await message.answer(status_text)
                except Exception as e:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /status: {e}")
            
            # –ö–æ–º–∞–Ω–¥–∞ /info
            @self.router.message(Command("info"))
            @self.router.message(F.text == "üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
            async def handle_info(message: Message):
                try:
                    info_text = f"""
<b>‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:</b>

<b>–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫:</b> AIogram 3.22.0 Bot Framework
<b>–í–µ—Ä—Å–∏—è:</b> 2.0.0
<b>–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:</b> –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è
<b>–•—Ä–∞–Ω–∏–ª–∏—â–µ:</b> Memory Storage
<b>–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ:</b> –§–∞–π–ª–æ–≤–æ–µ + –ö–æ–Ω—Å–æ–ª—å–Ω–æ–µ

<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
–ó–∞–ø—É—â–µ–Ω: {self._get_start_time()}
–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {self._get_estimated_messages()}
–§–∞–π–ª –ª–æ–≥–æ–≤: bot.log ({self._get_log_file_size()})

<b>üîß –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:</b>
‚Ä¢ Aiogram 3.22.0
‚Ä¢ aiohttp 3.12.15
‚Ä¢ asyncio
‚Ä¢ Python 3.11+
                    """
                    await message.answer(info_text)
                except Exception as e:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /info: {e}")
            
            # –ö–æ–º–∞–Ω–¥–∞ /admin
            @self.router.message(Command("admin"))
            async def handle_admin(message: Message):
                try:
                    if message.from_user.id not in ADMIN_IDS:
                        await message.answer("‚ùå <b>–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!</b>\n\n–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
                        return
                    
                    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
                    admin_text = f"""
<b>üë®‚Äçüíª –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å</b>

<b>üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —á–∞—Ç–µ: 1
–í—Å–µ–≥–æ –ª–æ–≥–æ–≤: {self._get_total_logs_count()}
–õ–æ–≥–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {self._get_today_logs_count()}
–†–∞–∑–º–µ—Ä –ª–æ–≥-—Ñ–∞–π–ª–∞: {self._get_log_file_size()}

<b>üîß –°–∏—Å—Ç–µ–º–∞:</b>
–û–°: {sys.platform}
Python: {sys.version.split()[0]}
–ü–∞–º—è—Ç—å: {self._get_memory_usage()} MB
–ê–ø—Ç–∞–π–º: {self._get_uptime()}

<b>ü§ñ –ë–æ—Ç:</b>
ID: {(await self.bot.get_me()).id}
Username: @{(await self.bot.get_me()).username}
–í–µ—Ä—Å–∏—è Aiogram: 3.22.0

<b>üë• –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:</b>
{len(ADMIN_IDS)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                    """
                    await message.answer(admin_text)
                except Exception as e:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /admin: {e}")
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            @self.router.message()
            async def handle_unknown(message: Message):
                try:
                    self.logger.info(f"‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.id}: {message.text}")
                    await message.answer(
                        "ü§î <b>–ù–µ –ø–æ–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—É</b>\n\n"
                        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏–ª–∏ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞.",
                        reply_markup=ReplyKeyboardMarkup(
                            keyboard=[
                                [KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å"), KeyboardButton(text="üîÑ –°—Ç–∞—Ç—É—Å")]
                            ],
                            resize_keyboard=True
                        )
                    )
                except Exception as e:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            
            self.logger.info("‚úÖ –í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {e}")
            raise
    
    def _get_current_time(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
        return datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    
    def _get_memory_usage(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏"""
        try:
            import psutil
            process = psutil.Process(os.getpid())
            return round(process.memory_info().rss / 1024 / 1024, 2)
        except ImportError:
            return "N/A"
    
    def _get_uptime(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã"""
        try:
            if not self.start_time:
                return "N/A"
            uptime = asyncio.get_event_loop().time() - self.start_time
            hours = int(uptime // 3600)
            minutes = int((uptime % 3600) // 60)
            seconds = int(uptime % 60)
            return f"{hours:02d}:{minutes:02d}:{seconds:02d}"
        except:
            return "N/A"
    
    def _get_start_time(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø—É—Å–∫–∞"""
        if self.start_time:
            return datetime.fromtimestamp(self.start_time).strftime('%Y-%m-%d %H:%M:%S')
        return "N/A"
    
    def _get_system_load(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            import psutil
            load = psutil.getloadavg()
            return f"{load[0]:.2f}, {load[1]:.2f}, {load[2]:.2f}"
        except (ImportError, AttributeError):
            return "N/A"
    
    async def _get_ping(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ ping –¥–æ —Å–µ—Ä–≤–µ—Ä–æ–≤ Telegram"""
        try:
            import time
            start_time = time.time()
            await self.bot.get_me()
            ping_time = (time.time() - start_time) * 1000
            return f"{ping_time:.2f}"
        except:
            return "N/A"
    
    def _get_today_logs_count(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ª–æ–≥–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è"""
        try:
            today = datetime.now().strftime('%Y-%m-%d')
            count = 0
            if os.path.exists('bot.log'):
                with open('bot.log', 'r', encoding='utf-8') as f:
                    for line in f:
                        if today in line:
                            count += 1
            return count
        except:
            return "N/A"
    
    def _get_total_logs_count(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ª–æ–≥–æ–≤"""
        try:
            if os.path.exists('bot.log'):
                with open('bot.log', 'r', encoding='utf-8') as f:
                    return sum(1 for _ in f)
            return 0
        except:
            return "N/A"
    
    def _get_log_file_size(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤"""
        try:
            if os.path.exists('bot.log'):
                size = os.path.getsize('bot.log')
                if size < 1024:
                    return f"{size} B"
                elif size < 1024 * 1024:
                    return f"{size/1024:.2f} KB"
                else:
                    return f"{size/(1024*1024):.2f} MB"
            return "0 B"
        except:
            return "N/A"
    
    def _get_estimated_messages(self):
        """–û—Ü–µ–Ω–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            # –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ –Ω—É–∂–Ω–æ –≤–µ—Å—Ç–∏ —Å—á–µ—Ç—á–∏–∫
            logs_count = self._get_total_logs_count()
            return max(0, logs_count // 3)  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
        except:
            return "N/A"
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            self.logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞...")
            
            if not self._validate_config():
                return False
            
            self._setup_signal_handlers()
            await self._create_aiohttp_session()
            
            if not await self._create_bot_instance():
                return False
            
            self._create_dispatcher()
            self._setup_handlers()
            
            self.start_time = asyncio.get_event_loop().time()
            self.is_running = True
            
            self.logger.info("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º polling...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º polling
            await self.dp.start_polling(
                self.bot,
                allowed_updates=["message", "callback_query"],
                handle_signals=False  # –ú—ã —Å–∞–º–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã
            )
            
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
            return False
    
    async def _safe_shutdown(self):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"""
        self.logger.info("üõë –ù–∞—á–∏–Ω–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
        self.is_running = False
        
        try:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º polling
            if self.dp:
                await self.dp.stop_polling()
                self.logger.info("‚úÖ Polling –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–æ—Ç–∞
            if self.bot:
                await self.bot.session.close()
                self.logger.info("‚úÖ –°–µ—Å—Å–∏—è –±–æ—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∞")
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º aiohttp —Å–µ—Å—Å–∏—é
            await self._close_aiohttp_session()
            
            self.logger.info("‚úÖ –í—Å–µ —Ä–µ—Å—É—Ä—Å—ã –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã: {e}")
        finally:
            # –ó–∞–≤–µ—Ä—à–∞–µ–º event loop
            tasks = [t for t in asyncio.all_tasks() if t is not asyncio.current_task()]
            for task in tasks:
                task.cancel()
            await asyncio.gather(*tasks, return_exceptions=True)
            
            self.logger.info("üëã –ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")
            os._exit(0)

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    bot_manager = AdvancedBotManager()
    
    try:
        success = await bot_manager.start()
        if success:
            bot_manager.logger.info("üéâ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        else:
            bot_manager.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")
            return 1
            
    except KeyboardInterrupt:
        bot_manager.logger.info("üìû –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª KeyboardInterrupt")
    except Exception as e:
        bot_manager.logger.error(f"üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return 1
    finally:
        await bot_manager._safe_shutdown()
    
    return 0

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    try:
        exit_code = asyncio.run(main())
        sys.exit(exit_code)
    except KeyboardInterrupt:
        print("\nüëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        sys.exit(0)
    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

diff --git a/bot.py b/bot_fixed.py
index 1234567..abcdefg 100644
--- a/bot.py
+++ b/bot_fixed.py
@@ -32,6 +32,7 @@ class Config:
     API_TOKEN = os.getenv("API_TOKEN", "").strip()
     ADMIN_CHAT_ID = int(os.getenv("ADMIN_CHAT_ID", "0") or "0")
-    FEEDBACK_CHANNEL = os.getenv("FEEDBACK_CHANNEL", "@LivePlaceFeedback").strip()
+    FEEDBACK_CHAT_ID = int(os.getenv("FEEDBACK_CHAT_ID", "-4852620232") or "-4852620232")
     SHEETS_ENABLED = os.getenv("SHEETS_ENABLED", "1").strip() not in {"", "0", "false", "False"}
     GSHEET_ID = os.getenv("GSHEET_ID", "").strip()
     GSHEET_TAB = os.getenv("GSHEET_TAB", "Ads").strip()
-    GSHEET_REFRESH_MIN = int(os.getenv("GSHEET_REFRESH_MIN", "2") or "2")
+    GSHEET_REFRESH_SEC = int(os.getenv("GSHEET_REFRESH_SEC", "120") or "120")
+    MEDIA_RETRY_COUNT = 3
+    MEDIA_RETRY_DELAY = 2
 
@@ -150,11 +153,20 @@ PRICE_RANGES = {
 def norm_mode(v: Any) -> str:
-    s = norm(v)
+    """–ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∂–∏–º–∞ —Å —É–¥–∞–ª–µ–Ω–∏–µ–º —ç–º–æ–¥–∑–∏"""
+    s = norm(v)
+    # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –∏ –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
+    s = re.sub(r'[^\w\s-]', '', s)
+    s = s.strip()
+    
-    if s in {"rent","–∞—Ä–µ–Ω–¥–∞","long","long-term","–¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ","longterm","üèò –∞—Ä–µ–Ω–¥–∞","üèò rent","üèò ·É•·Éò·É†·Éê·Éï·Éì·Éî·Éë·Éê"}: return "rent"
+    if s in {"rent","–∞—Ä–µ–Ω–¥–∞","long","longterm","–¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ"}: 
+        return "rent"
-    if s in {"sale","–ø—Ä–æ–¥–∞–∂–∞","buy","sell","üè† –ø—Ä–æ–¥–∞–∂–∞","üè† sale","üè† ·Éò·Éß·Éò·Éì·Éî·Éë·Éê"}: return "sale"
+    if s in {"sale","–ø—Ä–æ–¥–∞–∂–∞","buy","sell"}: 
+        return "sale"
-    if s in {"daily","–ø–æ—Å—É—Ç–æ—á–Ω–æ","sutki","—Å—É—Ç–∫–∏","short","short-term","day","üïì –ø–æ—Å—É—Ç–æ—á–Ω–æ üÜï","üïì daily rent üÜï","üïì ·Éì·É¶·Éò·É£·É†·Éê·Éì üÜï"}: return "daily"
+    if s in {"daily","–ø–æ—Å—É—Ç–æ—á–Ω–æ","sutki","—Å—É—Ç–∫–∏","short","shortterm","day"}: 
+        return "daily"
     return ""
 
+def clean_button_text(text: str) -> str:
+    """–ù–û–í–û–ï: –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏ –æ—Ç —ç–º–æ–¥–∑–∏ –∏ —Å—á—ë—Ç—á–∏–∫–æ–≤"""
+    text = re.sub(r"^[\U0001F300-\U0001F9FF\s]+", "", text)
+    text = re.sub(r"\s*\(\d+\)\s*$", "", text)
+    return text.strip()
+
@@ -185,6 +197,21 @@ def looks_like_image(url: str) -> bool:
            "googleusercontent.com" in u or "google.com/uc?export=download" in u
 
+def is_valid_photo_url(url: str) -> bool:
+    """–ù–û–í–û–ï: –í–∞–ª–∏–¥–∞—Ü–∏—è URL —Ñ–æ—Ç–æ"""
+    if not url or not url.strip():
+        return False
+    try:
+        parsed = urlparse(url)
+        if not parsed.scheme in ['http', 'https']:
+            return False
+        if not parsed.netloc:
+            return False
+        return looks_like_image(url)
+    except Exception:
+        return False
+
 def collect_photos(row: Dict[str, Any]) -> List[str]:
+    """–ò–°–ü–†–ê–í–õ–ï–ù–û: –°–±–æ—Ä –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ç–æ"""
     out = []
     for i in range(1, 11):
         u = str(row.get(f"photo{i}", "") or "").strip()
-        if not u: continue
+        if not u: 
+            continue
         u = drive_direct(u)
-        if looks_like_image(u): out.append(u)
+        if is_valid_photo_url(u):
+            out.append(u)
+        else:
+            logger.warning(f"‚ö†Ô∏è Invalid photo URL: {u[:50]}...")
     return out[:10]
 
@@ -337,9 +364,10 @@ def _filter_rows(rows: List[Dict[str, Any]], q: Dict[str, Any]) -> List[Dict[st
+    """–ò–°–ü–†–ê–í–õ–ï–ù–û: –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–µ–π —Ä–µ–∂–∏–º–∞"""
     def ok(r):
-        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä)
         if q.get("mode"):
             row_mode = norm_mode(r.get("mode"))
-            query_mode = q["mode"]
+            query_mode = norm_mode(q["mode"])  # –ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
             logger.debug(f"Mode check: row={row_mode}, query={query_mode}")
             if row_mode != query_mode:
@@ -370,6 +398,52 @@ def _slice(listing: List[Any], page: int, size: int) -> List[Any]:
     return listing[page*size:(page+1)*size]
 
+# ------ Safe media sending ------
+async def send_media_safe(chat_id: int, photos: List[str], text: str, 
+                         retry_count: int = Config.MEDIA_RETRY_COUNT) -> bool:
+    """–ù–û–í–û–ï: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞ —Å retry"""
+    if not photos:
+        return False
+    
+    for attempt in range(retry_count):
+        try:
+            media = [InputMediaPhoto(media=photos[0], caption=text)]
+            for p in photos[1:]:
+                media.append(InputMediaPhoto(media=p))
+            
+            await bot.send_media_group(chat_id, media)
+            logger.info(f"‚úÖ Media sent successfully: {len(photos)} photos")
+            return True
+            
+        except Exception as e:
+            error_msg = str(e)
+            logger.error(f"‚ùå Attempt {attempt + 1}/{retry_count} failed: {error_msg}")
+            
+            if "WEBPAGE_CURL_FAILED" in error_msg:
+                logger.error(f"üö´ WEBPAGE_CURL_FAILED for photos: {photos}")
+                if Config.ADMIN_CHAT_ID:
+                    try:
+                        await bot.send_message(
+                            Config.ADMIN_CHAT_ID,
+                            f"‚ö†Ô∏è WEBPAGE_CURL_FAILED\nPhotos:\n{chr(10).join(photos[:3])}"
+                        )
+                    except Exception:
+                        pass
+                return False
+                
+            elif "WEBPAGE_MEDIA_EMPTY" in error_msg:
+                logger.error(f"üö´ WEBPAGE_MEDIA_EMPTY for photos: {photos}")
+                return False
+            
+            if attempt < retry_count - 1:
+                await asyncio.sleep(Config.MEDIA_RETRY_DELAY)
+            else:
+                logger.error(f"üí• All {retry_count} attempts failed")
+                return False
+    
+    return False
+
 # ------ Commands & Handlers ------
 
@@ -390,8 +464,12 @@ async def cmd_health(message: types.Message):
     if message.from_user.id != Config.ADMIN_CHAT_ID:
         return
-    await message.answer(f"‚úÖ Bot OK\nSheets enabled: {Config.SHEETS_ENABLED}\nCached rows: {len(_cached_rows)}")
+    await message.answer(
+        f"‚úÖ Bot OK\n"
+        f"Sheets enabled: {Config.SHEETS_ENABLED}\n"
+        f"Cached rows: {len(_cached_rows)}\n"
+        f"Cache age: {int(monotonic() - _cache_ts)}s\n"
+        f"Refresh interval: {Config.GSHEET_REFRESH_SEC}s"
+    )
 
@@ -407,6 +485,80 @@ async def cmd_refresh(message: types.Message):
     await message.answer(f"‚ôªÔ∏è –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–æ. –í –∫—ç—à–µ: {len(rows)} —Å—Ç—Ä–æ–∫.")
 
+# ------ –ù–û–í–û–ï: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" ------
+@dp.message(F.text.in_([T["btn_back"]["ru"], T["btn_back"]["en"], T["btn_back"]["ka"]]))
+async def handle_back(message: types.Message, state: FSMContext):
+    """–ù–û–í–û–ï: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥ –≤ FSM"""
+    current_state = await state.get_state()
+    lang = current_lang(message.from_user.id)
+    
+    if current_state == Wizard.city.state:
+        await state.set_state(Wizard.mode)
+        kb = ReplyKeyboardMarkup(
+            keyboard=[
+                [KeyboardButton(text=T["btn_rent"][lang])],
+                [KeyboardButton(text=T["btn_sale"][lang])],
+                [KeyboardButton(text=T["btn_daily"][lang])],
+                [KeyboardButton(text=T["btn_back"][lang])]
+            ],
+            resize_keyboard=True
+        )
+        await message.answer("‚¨ÖÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:", reply_markup=kb)
+        
+    elif current_state == Wizard.district.state:
+        data = await state.get_data()
+        mode = data.get("mode", "")
+        await state.set_state(Wizard.city)
+        
+        rows = await rows_async()
+        filtered_rows = [r for r in rows if norm_mode(r.get("mode")) == mode]
+        city_counter = Counter([str(r.get("city","")).strip() for r in filtered_rows if r.get("city")])
+        
+        buttons = []
+        for city, count in sorted(city_counter.items(), key=lambda x: (-x[1], x[0].lower())):
+            icon = CITY_ICONS.get(norm(city), "üè†")
+            label = f"{icon} {city} ({count})"
+            buttons.append([KeyboardButton(text=label)])
+        buttons.append([KeyboardButton(text=T["btn_skip"][lang])])
+        buttons.append([KeyboardButton(text=T["btn_back"][lang])])
+        
+        kb = ReplyKeyboardMarkup(keyboard=buttons[:42], resize_keyboard=True)
+        await message.answer("‚¨ÖÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=kb)
+        
+    elif current_state == Wizard.rooms.state:
+        # –õ–æ–≥–∏–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Ä–∞–π–æ–Ω—É/–≥–æ—Ä–æ–¥—É
+        # ...
+        
+    elif current_state == Wizard.price.state:
+        await state.set_state(Wizard.rooms)
+        kb = ReplyKeyboardMarkup(
+            keyboard=[
+                [KeyboardButton(text="1"), KeyboardButton(text="2"), KeyboardButton(text="3")],
+                [KeyboardButton(text="4"), KeyboardButton(text="5+")],
+                [KeyboardButton(text=T["btn_skip"][lang]), KeyboardButton(text=T["btn_back"][lang])]
+            ],
+            resize_keyboard=True
+        )
+        await message.answer("‚¨ÖÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç:", reply_markup=kb)
+        
+    else:
+        await state.clear()
+        await message.answer("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu(lang))
+
 # ------ Start search flow (Wizard) ------
@@ -421,6 +573,7 @@ async def start_search(message: types.Message, state: FSMContext):
             [KeyboardButton(text=T["btn_rent"][lang])],
             [KeyboardButton(text=T["btn_sale"][lang])],
             [KeyboardButton(text=T["btn_daily"][lang])],
+            [KeyboardButton(text=T["btn_back"][lang])]
         ],
         resize_keyboard=True
     )
@@ -429,16 +582,23 @@ async def start_search(message: types.Message, state: FSMContext):
 @dp.message(Wizard.mode)
 async def pick_city_mode(message: types.Message, state: FSMContext):
+    lang = current_lang(message.from_user.id)
     mode = norm_mode(message.text)
     
     if not mode:
         return await message.answer("–£–∫–∞–∂–∏—Ç–µ rent/sale/daily")
     
     await state.update_data(mode=mode)
+    logger.info(f"User {message.from_user.id} selected mode: {mode}")
 
     rows = await rows_async()
-    city_counter = Counter([str(r.get("city","")).strip() for r in rows if r.get("city")])
+    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –§–∏–ª—å—Ç—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ –ø–æ —Ä–µ–∂–∏–º—É –ø–µ—Ä–µ–¥ –ø–æ–¥—Å—á—ë—Ç–æ–º
+    filtered_rows = [r for r in rows if norm_mode(r.get("mode")) == mode]
+    logger.info(f"Filtered {len(filtered_rows)}/{len(rows)} rows for mode={mode}")
+    
+    city_counter = Counter([str(r.get("city","")).strip() 
+                           for r in filtered_rows 
+                           if r.get("city")])
     
     buttons = []
     for city, count in sorted(city_counter.items(), key=lambda x: (-x[1], x[0].lower())):
@@ -450,6 +610,7 @@ async def pick_city_mode(message: types.Message, state: FSMContext):
         buttons = [[KeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")]]
     else:
         buttons.append([KeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")])
+    buttons.append([KeyboardButton(text=T["btn_back"][lang])])
     
     kb = ReplyKeyboardMarkup(keyboard=buttons[:42], resize_keyboard=True)
@@ -458,17 +619,25 @@ async def pick_city_mode(message: types.Message, state: FSMContext):
 
 @dp.message(Wizard.city)
 async def pick_district(message: types.Message, state: FSMContext):
+    lang = current_lang(message.from_user.id)
     city_text = message.text.strip()
-    if city_text.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
+    
+    if city_text.lower() in {t(lang, "btn_skip").lower(), "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "skip"}:
         await state.update_data(city="")
         await state.update_data(district="")
         await state.set_state(Wizard.rooms)
         kb = ReplyKeyboardMarkup(
             keyboard=[
                 [KeyboardButton(text="1"), KeyboardButton(text="2"), KeyboardButton(text="3")],
-                [KeyboardButton(text="4"), KeyboardButton(text="5+"), KeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")]
+                [KeyboardButton(text="4"), KeyboardButton(text="5+")],
+                [KeyboardButton(text=T["btn_skip"][lang]), KeyboardButton(text=T["btn_back"][lang])]
             ],
             resize_keyboard=True
         )
@@ -476,16 +645,24 @@ async def pick_district(message: types.Message, state: FSMContext):
         return
 
-    city = re.sub(r"^\s*[^\w\d–ê-–Ø–∞-—è–Å—ëA-Za-z]+","", city_text)
-    city = re.sub(r"\(\d+\)\s*$","", city).strip()
+    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –æ—á–∏—Å—Ç–∫–∏
+    city = clean_button_text(city_text)
     await state.update_data(city=city)
+    logger.info(f"User selected city: '{city}' (from button: '{city_text}')")
 
+    data = await state.get_data()
+    mode = data.get("mode", "")
+    
     rows = await rows_async()
-    district_counter = Counter([str(r.get("district","")).strip() for r in rows if norm(r.get("city")) == norm(city) and r.get("district")])
+    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ä–µ–∂–∏–º—É –ò –≥–æ—Ä–æ–¥—É
+    filtered_rows = [r for r in rows 
+                    if norm_mode(r.get("mode")) == mode 
+                    and norm(r.get("city")) == norm(city)]
+    
+    district_counter = Counter([str(r.get("district","")).strip() 
+                               for r in filtered_rows 
+                               if r.get("district")])
     
     if not district_counter:
         await state.update_data(district="")
@@ -493,7 +670,8 @@ async def pick_district(message: types.Message, state: FSMContext):
         kb = ReplyKeyboardMarkup(
             keyboard=[
                 [KeyboardButton(text="1"), KeyboardButton(text="2"), KeyboardButton(text="3")],
-                [KeyboardButton(text="4"), KeyboardButton(text="5+"), KeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")]
+                [KeyboardButton(text="4"), KeyboardButton(text="5+")],
+                [KeyboardButton(text=T["btn_skip"][lang]), KeyboardButton(text=T["btn_back"][lang])]
             ],
             resize_keyboard=True
         )
@@ -502,6 +680,7 @@ async def pick_district(message: types.Message, state: FSMContext):
 
     buttons = [[KeyboardButton(text=f"{d} ({c})")] for d,c in sorted(district_counter.items(), key=lambda x:(-x[1], x[0].lower()))]
-    buttons.append([KeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")])
+    buttons.append([KeyboardButton(text=T["btn_skip"][lang])])
+    buttons.append([KeyboardButton(text=T["btn_back"][lang])])
     
     kb = ReplyKeyboardMarkup(keyboard=buttons[:42], resize_keyboard=True)
@@ -510,15 +689,18 @@ async def pick_district(message: types.Message, state: FSMContext):
 
 @dp.message(Wizard.district)
 async def pick_rooms_or_price(message: types.Message, state: FSMContext):
+    lang = current_lang(message.from_user.id)
     text = message.text.strip()
     
-    if text.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
+    if text.lower() in {t(lang, "btn_skip").lower(), "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "skip"}:
         await state.update_data(district="")
     else:
-        district = re.sub(r"\(\d+\)\s*$","", text).strip()
+        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –û—á–∏—Å—Ç–∫–∞ –æ—Ç —Å—á—ë—Ç—á–∏–∫–∞
+        district = clean_button_text(text)
         await state.update_data(district=district)
+        logger.info(f"User selected district: '{district}' (from button: '{text}')")
 
     await state.set_state(Wizard.rooms)
@@ -526,7 +708,8 @@ async def pick_rooms_or_price(message: types.Message, state: FSMContext):
         keyboard=[
             [KeyboardButton(text="1"), KeyboardButton(text="2"), KeyboardButton(text="3")],
-            [KeyboardButton(text="4"), KeyboardButton(text="5+"), KeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")]
+            [KeyboardButton(text="4"), KeyboardButton(text="5+")],
+            [KeyboardButton(text=T["btn_skip"][lang]), KeyboardButton(text=T["btn_back"][lang])]
         ],
         resize_keyboard=True
     )
@@ -534,9 +717,11 @@ async def pick_rooms_or_price(message: types.Message, state: FSMContext):
 
 @dp.message(Wizard.rooms)
 async def pick_price_prompt(message: types.Message, state: FSMContext):
+    lang = current_lang(message.from_user.id)
     text = message.text.strip()
     
-    if text.lower() in {"–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å","–≤–µ—Å—å –≥–æ—Ä–æ–¥","–≤–µ—Å—å —Ä–∞–π–æ–Ω"}:
+    if text.lower() in {t(lang, "btn_skip").lower(), "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "skip", "–≤–µ—Å—å –≥–æ—Ä–æ–¥", "–≤–µ—Å—å —Ä–∞–π–æ–Ω"}:
         await state.update_data(rooms="")
     else:
         val = text.strip().lower()
@@ -548,6 +733,7 @@ async def pick_price_prompt(message: types.Message, state: FSMContext):
     ranges = PRICE_RANGES.get(mode, PRICE_RANGES["sale"])
     buttons = [[KeyboardButton(text=p)] for p in ranges]
-    buttons.append([KeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")])
+    buttons.append([KeyboardButton(text=T["btn_skip"][lang])])
+    buttons.append([KeyboardButton(text=T["btn_back"][lang])])
     kb = ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)
     await state.set_state(Wizard.price)
@@ -555,9 +741,11 @@ async def pick_price_prompt(message: types.Message, state: FSMContext):
 
 @dp.message(Wizard.price)
 async def show_results_handler(message: types.Message, state: FSMContext):
+    lang = current_lang(message.from_user.id)
     text = message.text.strip()
     
-    if text.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
+    if text.lower() in {t(lang, "btn_skip").lower(), "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "skip"}:
         price = ""
     else:
         price = text
@@ -573,7 +761,7 @@ async def show_results_handler(message: types.Message, state: FSMContext):
         "price": price.strip()
     }
     
-    logger.info(f"User {message.from_user.id} search query: {query}")
+    logger.info(f"üîç User {message.from_user.id} search query: {query}")
 
     all_rows = await rows_async()
-    logger.info(f"Total rows loaded: {len(all_rows)}")
+    logger.info(f"üì¶ Total rows loaded: {len(all_rows)}")
     
     rows = _filter_rows(all_rows, query)
-    logger.info(f"Filtered results: {len(rows)}")
+    logger.info(f"‚úÖ Filtered results: {len(rows)}")
     
     USER_RESULTS[message.from_user.id] = {"query": query, "rows": rows, "page": 0}
@@ -592,7 +780,7 @@ async def show_results_handler(message: types.Message, state: FSMContext):
         msg += "\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞."
         
-        await message.answer(msg, reply_markup=main_menu(current_lang(uid)))
+        await message.answer(msg, reply_markup=main_menu(lang))
         await state.clear()
         return
 
@@ -603,6 +791,7 @@ async def show_results_handler(message: types.Message, state: FSMContext):
 
 # ------ Show single ad with interaction buttons ------
 async def show_single_ad(chat_id: int, uid: int):
+    """–ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞"""
     bundle = USER_RESULTS.get(uid)
     if not bundle:
         await bot.send_message(chat_id, "–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.", reply_markup=main_menu(current_lang(uid)))
@@ -617,7 +806,7 @@ async def show_single_ad(chat_id: int, uid: int):
     if current_index >= len(rows):
         await bot.send_message(
             chat_id, 
-            "–í—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è! üéâ\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
+            "üéâ –í—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
             reply_markup=main_menu(current_lang(uid))
         )
         return
@@ -638,20 +827,18 @@ async def show_single_ad(chat_id: int, uid: int):
     
     kb = InlineKeyboardMarkup(inline_keyboard=buttons)
     
-    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç
+    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞
     if photos:
-        media = [InputMediaPhoto(media=photos[0], caption=text)]
-        for p in photos[1:]:
-            media.append(InputMediaPhoto(media=p))
-        try:
-            msgs = await bot.send_media_group(chat_id, media)
+        success = await send_media_safe(chat_id, photos, text)
+        if success:
             await bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)
-        except Exception as e:
-            logger.error(f"Error sending media group: {e}")
-            await bot.send_message(chat_id, text, reply_markup=kb)
+        else:
+            await bot.send_message(chat_id, f"{text}\n\n‚ö†Ô∏è –§–æ—Ç–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã", reply_markup=kb)
     else:
         await bot.send_message(chat_id, text, reply_markup=kb)
 
@@ -693,13 +880,15 @@ async def cb_fav_add(cb: types.CallbackQuery):
     
     bundle = USER_RESULTS.get(uid)
     if not bundle or index >= len(bundle["rows"]):
-        await cb.answer("–û—à–∏–±–∫–∞: –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
+        await cb.answer("–û—à–∏–±–∫–∞")
         return
     
     row = bundle["rows"][index]
     
     if not any(fav.get("index") == index for fav in USER_FAVS[uid]):
         USER_FAVS[uid].append({"index": index, "data": row})
-        await cb.answer("‚≠ê –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!")
+        await cb.answer("‚≠ê –î–æ–±–∞–≤–ª–µ–Ω–æ!")
         
         buttons = [
@@ -708,7 +897,7 @@ async def cb_fav_add(cb: types.CallbackQuery):
                 InlineKeyboardButton(text="üëé –î–∏–∑–ª–∞–π–∫", callback_data=f"dislike:{index}")
             ],
             [
-                InlineKeyboardButton(text="‚≠ê –£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ", callback_data=f"fav_del:{index}")
+                InlineKeyboardButton(text="‚≠ê –£–¥–∞–ª–∏—Ç—å", callback_data=f"fav_del:{index}")
             ]
         ]
@@ -726,7 +915,7 @@ async def cb_fav_del(cb: types.CallbackQuery):
     index = int(cb.data.split(":")[1])
     
     USER_FAVS[uid] = [fav for fav in USER_FAVS[uid] if fav.get("index") != index]
-    await cb.answer("–£–¥–∞–ª–µ–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ")
+    await cb.answer("–£–¥–∞–ª–µ–Ω–æ")
     
     buttons = [
         [
@@ -751,11 +940,15 @@ async def handle_lead_form(message: types.Message):
     if uid not in USER_LEAD_STATE:
         return
     
     state = USER_LEAD_STATE[uid]
     
     if state == "awaiting_name":
-        USER_LEAD_DATA[uid]["name"] = message.text.strip()
+        USER_LEAD_DATA[uid]["name"] = message.text.strip()
         USER_LEAD_STATE[uid] = "awaiting_phone"
         
@@ -765,16 +958,18 @@ async def handle_lead_form(message: types.Message):
         
     elif state == "awaiting_phone":
-        USER_LEAD_DATA[uid]["phone"] = message.text.strip()
+        USER_LEAD_DATA[uid]["phone"] = message.text.strip()
         
-        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–∏–¥ –≤ –∫–∞–Ω–∞–ª
+        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–∏–¥ –≤ –∫–∞–Ω–∞–ª, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
         await send_lead_to_channel(uid)
         
-        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
         del USER_LEAD_STATE[uid]
         lead_data = USER_LEAD_DATA.pop(uid)
         
+        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç —Ç–æ–ª—å–∫–æ –∫–æ—Ä–æ—Ç–∫–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
         await message.answer(
             "‚úÖ <b>–°–ø–∞—Å–∏–±–æ!</b> –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞.\n\n"
             "–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è! üìû",
@@ -782,11 +977,13 @@ async def handle_lead_form(message: types.Message):
         )
         
-        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –æ–±—ä—è–≤–ª–µ–Ω–∏—é
         current_index = lead_data.get("ad_index", 0)
         USER_CURRENT_INDEX[uid] = current_index + 1
         
@@ -795,7 +992,8 @@ async def handle_lead_form(message: types.Message):
 
 async def send_lead_to_channel(uid: int):
-    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ª–∏–¥–∞ –≤ Telegram –∫–∞–Ω–∞–ª"""
+    """–ò–°–ü–†–ê–í–õ–ï–ù–û: –û—Ç–ø—Ä–∞–≤–∫–∞ –ª–∏–¥–∞ –¢–û–õ–¨–ö–û –≤ –∫–∞–Ω–∞–ª, –Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
     if uid not in USER_LEAD_DATA:
         return
     
@@ -803,7 +1001,7 @@ async def send_lead_to_channel(uid: int):
     ad = lead.get("ad_data", {})
     
-    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–∞–Ω–∞–ª–∞
+    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–∞–Ω–∞–ª–∞/–∞–¥–º–∏–Ω–∞
     text = (
         "üî• <b>–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê</b>\n\n"
         f"üë§ <b>–ò–º—è:</b> {lead.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
@@ -812,18 +1010,32 @@ async def send_lead_to_channel(uid: int):
         f"<b>–ò–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:</b>\n"
         f"üè† {ad.get('title_ru', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n"
         f"üìç {ad.get('city', '')} {ad.get('district', '')}\n"
         f"üí∞ {ad.get('price', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
+        f"üõè {ad.get('rooms', '')} –∫–æ–º–Ω–∞—Ç\n"
         f"‚òéÔ∏è –¢–µ–ª–µ—Ñ–æ–Ω –≤–ª–∞–¥–µ–ª—å—Ü–∞: {ad.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n"
         f"‚è∞ {lead.get('timestamp', '')}"
     )
     
-    try:
-        await bot.send_message(Config.FEEDBACK_CHANNEL, text)
-        logger.info(f"Lead sent to channel for user {uid}")
-    except Exception as e:
-        logger.error(f"Failed to send lead to channel: {e}")
-        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É, –µ—Å–ª–∏ –∫–∞–Ω–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
-        if Config.ADMIN_CHAT_ID:
+    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª —Å retry
+    for attempt in range(3):
+        try:
+            await bot.send_message(Config.FEEDBACK_CHAT_ID, text)
+            logger.info(f"‚úÖ Lead sent to channel for user {uid}")
+            return
+        except Exception as e:
+            logger.error(f"‚ùå Attempt {attempt + 1}/3 failed to send lead: {e}")
+            if attempt < 2:
+                await asyncio.sleep(2)
+            else:
+                # –ï—Å–ª–∏ –∫–∞–Ω–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É
+                if Config.ADMIN_CHAT_ID and Config.ADMIN_CHAT_ID != Config.FEEDBACK_CHAT_ID:
+                    try:
+                        await bot.send_message(
+                            Config.ADMIN_CHAT_ID, 
+                            f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–∏–¥–∞ –≤ –∫–∞–Ω–∞–ª:\n\n{text}"
+                        )
+                    except Exception:
+                        logger.error("üí• Failed to send to admin as fallback")
 
 # ------ Generic handlers for language and menu ------
@@ -885,7 +1097,8 @@ async def show_favorites(message: types.Message):
         await message.answer(f"–£ –≤–∞—Å {len(favs)} –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π:")
         await show_single_ad(message.chat.id, uid)
 
@dp.message(F.text.in_([T["btn_home"]["ru"], T["btn_home"]["en"], T["btn_home"]["ka"]]))
-async def show_menu(message: types.Message):
+async def show_menu(message: types.Message, state: FSMContext):
     lang = current_lang(message.from_user.id)
+    await state.clear()
     await message.answer(T["menu_title"][lang], reply_markup=main_menu(lang))
 
@@ -913,15 +1126,50 @@ def log_event(event: str, uid: int):
 @dp.message(Command("stats"))
 async def cmd_stats(message: types.Message):
     if message.from_user.id != Config.ADMIN_CHAT_ID:
         return
     d = _today_str()
     c = AGG_BY_DAY[d]
-    await message.answer(f"üìä –°–µ–≥–æ–¥–Ω—è: search={c['search']}, view={c['view']}, leads={c['lead']}")
+    await message.answer(
+        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è</b>\n\n"
+        f"üîç –ü–æ–∏—Å–∫–æ–≤: {c['search']}\n"
+        f"üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {c['view']}\n"
+        f"‚ù§Ô∏è –õ–∞–π–∫–æ–≤: {c['like']}\n"
+        f"üìù –õ–∏–¥–æ–≤: {c['lead']}"
+    )
+
+# ------ –ù–û–í–û–ï: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ ------
+async def auto_refresh_cache():
+    """–ù–û–í–û–ï: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets"""
+    while True:
+        try:
+            await asyncio.sleep(Config.GSHEET_REFRESH_SEC)
+            logger.info("üîÑ Auto-refresh: loading data from Google Sheets...")
+            rows = await rows_async(force=True)
+            logger.info(f"‚úÖ Auto-refresh complete: {len(rows)} rows in cache")
+            
+            if Config.ADMIN_CHAT_ID and monotonic() % 3600 < Config.GSHEET_REFRESH_SEC:
+                try:
+                    await bot.send_message(
+                        Config.ADMIN_CHAT_ID,
+                        f"üîÑ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(rows)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π"
+                    )
+                except Exception:
+                    pass
+                    
+        except Exception as e:
+            logger.exception(f"‚ùå Auto-refresh error: {e}")
+            await asyncio.sleep(60)
 
 async def heartbeat():
+    """–ò–°–ü–†–ê–í–õ–ï–ù–û: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
     while True:
         try:
-            logger.info("Heartbeat OK")
+            logger.info(f"üíì Heartbeat OK | Cache: {len(_cached_rows)} rows | Age: {int(monotonic() - _cache_ts)}s")
         except Exception:
-            logger.exception("Heartbeat error")
+            logger.exception("‚ùå Heartbeat error")
         await asyncio.sleep(600)
 
 # ------ Startup / Shutdown ------
 async def startup():
+    """–ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π"""
+    logger.info("üöÄ LivePlace bot starting...")
+    
+    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
     await rows_async(force=True)
+    
+    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
     if Config.ADMIN_CHAT_ID:
         try:
-            await bot.send_message(Config.ADMIN_CHAT_ID, "ü§ñ LivePlace bot started (Sheets enabled)")
-        except Exception:
-            pass
+            await bot.send_message(
+                Config.ADMIN_CHAT_ID, 
+                f"‚úÖ <b>LivePlace bot started</b>\n\n"
+                f"üìä Loaded: {len(_cached_rows)} ads\n"
+                f"üîÑ Auto-refresh: every {Config.GSHEET_REFRESH_SEC}s\n"
+                f"üì¢ Feedback channel: {Config.FEEDBACK_CHAT_ID}"
+            )
+        except Exception as e:
+            logger.error(f"Failed to notify admin on startup: {e}")
+    
+    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
     asyncio.create_task(heartbeat())
+    asyncio.create_task(auto_refresh_cache())
+    
-    logger.info("LivePlace bot starting‚Ä¶")
+    logger.info("‚úÖ Bot startup complete")
 
 async def shutdown():
+    """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"""
     try:
+        logger.info("üõë Bot shutting down...")
         await bot.session.close()
+        logger.info("‚úÖ Bot shutdown complete")
-    except Exception:
-        pass
-    logger.info("Bot shutdown complete")
+    except Exception as e:
+        logger.exception(f"Error during shutdown: {e}")
 
 # ------ Main ------